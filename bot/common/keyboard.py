from aiogram.types import InlineKeyboardButton as IKB, InlineKeyboardMarkup as IKM
from util import logger


# common message buttons:
def to_start_kb() -> IKM:
    return IKM(inline_keyboard=[
        [to_start_btn()]
    ])


def to_start_btn() -> IKB:
    return IKB(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è', callback_data='start')


def skip_btn() -> IKB:
    return IKB(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ñ∂Ô∏è", callback_data="skip")


# menu buttons:
def check_btn(repair_request: dict) -> IKB:
    return IKB(text='–î–æ–±–∞–≤–∏—Ç—å —á–µ–∫ üßæ', callback_data=f"check:{repair_request['id']}")


def comment_btn(repair_request: dict) -> IKB:
    return IKB(text='–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üìù', callback_data=f"add_comment:{repair_request['id']}")


def not_relevant_btn(repair_request: dict) -> IKB:
    return IKB(text='–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ ‚ùå', callback_data=f"not_relevant:{repair_request['id']}")


def done_btn(repair_request: dict) -> IKB:
    return IKB(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data=f"done:{repair_request['id']}")


def set_contractor_btn(repair_request: dict) -> IKB:
    return IKB(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è üë®‚Äçüîß", callback_data=f"set_con:{repair_request['id']}")


# common keyboards
def skip_kb() -> IKM:
    return IKM(inline_keyboard=[[skip_btn()]])


# keyboards for repair request message:
def rr_admin_kb(repair_request: dict) -> IKM:
    arr_kb = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏
    # 1. –£ –∑–∞—è–≤–∫–∏ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (contractor is None)
    # 2. –£ –∑–∞—è–≤–∫–∏ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (managerTgId is None)
    if repair_request['contractor'] is None and not repair_request.get('managerTgId'):
        logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' –¥–ª—è –∑–∞—è–≤–∫–∏ {repair_request.get('id')}")
        row = [set_contractor_btn(repair_request)]
        arr_kb.append(row)
    else:
        logger.info(f"–ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' –¥–ª—è –∑–∞—è–≤–∫–∏ {repair_request.get('id')}, " 
                   f"—Ç.–∫. contractor={repair_request.get('contractor')}, managerTgId={repair_request.get('managerTgId')}")

    if repair_request['checkPhoto'] is None:
        row = [check_btn(repair_request)]
        arr_kb.append(row)

    row = [comment_btn(repair_request)]
    arr_kb.append(row)

    return IKM(inline_keyboard=arr_kb)


def rr_customer_kb(repair_request: dict) -> IKM:
    arr_kb = []
    
    try:
        status = int(repair_request['status'])
    except (ValueError, TypeError):
        status = repair_request.get('status')
        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å {repair_request.get('status')} –≤ int –¥–ª—è customer kb")

    if status != 4:
        row = [not_relevant_btn(repair_request)]
        arr_kb.append(row)

    row = [comment_btn(repair_request)]
    arr_kb.append(row)

    return IKM(inline_keyboard=arr_kb)


def rr_contractor_kb(repair_request: dict) -> IKM:
    arr_kb = []
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –≤ int –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    try:
        status = int(repair_request['status'])
    except (ValueError, TypeError):
        status = repair_request.get('status')
        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å {repair_request.get('status')} –≤ int –¥–ª—è contractor kb")

    if status != 3:  # –ù–µ "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        row = [done_btn(repair_request)]
        arr_kb.append(row)

    if repair_request['checkPhoto'] is None:
        row = [check_btn(repair_request)]
        arr_kb.append(row)

    row = [comment_btn(repair_request)]
    arr_kb.append(row)

    return IKM(inline_keyboard=arr_kb)


def rr_manager_assigned_kb(repair_request: dict) -> IKM:
    arr_kb = []
    
    try:
        status = int(repair_request['status'])
    except (ValueError, TypeError):
        status = 2
        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å {repair_request.get('status')} –≤ int –¥–ª—è manager kb")
    
    logger.info(f"–û–¢–õ–ê–î–ö–ê rr_manager_assigned_kb: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞—è–≤–∫–∏ id={repair_request.get('id')}, status={status}, managerTgId={repair_request.get('managerTgId')}")
    
    if status != 3 and status != 4:
        logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' –¥–ª—è –∑–∞—è–≤–∫–∏ {repair_request['id']} (—Å—Ç–∞—Ç—É—Å {status})")
        row = [done_btn(repair_request)]
        arr_kb.append(row)
    else:
        logger.info(f"–ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' –¥–ª—è –∑–∞—è–≤–∫–∏ {repair_request['id']}, —Ç.–∫. —Å—Ç–∞—Ç—É—Å = {status}")

    if repair_request.get('checkPhoto') is None and status != 4:
        row = [check_btn(repair_request)]
        arr_kb.append(row)

    row = [comment_btn(repair_request)]
    arr_kb.append(row)
    
    kb = IKM(inline_keyboard=arr_kb)
    logger.info(f"–û–¢–õ–ê–î–ö–ê rr_manager_assigned_kb: –ò—Ç–æ–≥–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {kb}")
    return kb


async def is_manager_executor(user_id: int, repair_request: dict) -> bool:
    from util import crm, logger
    import traceback
    stack_trace = traceback.format_stack()
    for line in stack_trace[:-1]:
        logger.info(f"–°–¢–ï–ö: {line.strip()}")
    
    if 'managerTgId' in repair_request and repair_request['managerTgId']:
        is_executor = str(user_id) == str(repair_request['managerTgId'])
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ managerTgId: tg_id={user_id}, managerTgId={repair_request['managerTgId']}, is_executor={is_executor}")
        return is_executor
    
    if 'managerId' in repair_request and repair_request['managerId']:
        user = await crm.get_user_by_tg_id(user_id)
        if user and 'id' in user:
            is_executor = user['id'] == repair_request['managerId']
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ managerId: user_id={user['id']}, managerId={repair_request['managerId']}, is_executor={is_executor}")
            
            if is_executor:
                logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º managerTgId –¥–ª—è –∑–∞—è–≤–∫–∏ {repair_request['id']}")
                repair_request['managerTgId'] = str(user_id)
                
                try:
                    result = await crm.update_repair_request(repair_request['id'], {
                        'managerTgId': str(user_id)
                    })
                    if result:
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω managerTgId –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—è–≤–∫–∏ {repair_request['id']}")
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å managerTgId –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—è–≤–∫–∏ {repair_request['id']}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ managerTgId: {str(e)}")
                
                return True
    
    builder = repair_request.get('builder', '')
    if builder and '–ú–µ–Ω–µ–¥–∂–µ—Ä:' in builder:
        user = await crm.get_user_by_tg_id(user_id)
        if user and user.get('name') and user.get('name') in builder:
            logger.info(f"–≠—Ç–æ –∑–∞–¥–∞—á–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {user.get('name')}")
            repair_request['managerId'] = user['id']
            repair_request['managerTgId'] = str(user_id)
            
            try:
                result = await crm.update_repair_request(repair_request['id'], {
                    'managerId': user['id'],
                    'managerTgId': str(user_id)
                })
                if result:
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã managerId –∏ managerTgId –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—è–≤–∫–∏ {repair_request['id']}")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—è–≤–∫–∏ {repair_request['id']}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                
            return True
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∑–∞—è–≤–∫–∏ {repair_request.get('id')}")
    return False

